# ALIASES

#append NFS server name to end of df output
alias qq_df="df -PT | awk '{if (\$2 == \"nfs\") { \"host \`echo \"\$1\" | cut -d: -f1\` | grep -o '[[:alpha:]]*-fs' \" | getline nfs_server; print \$0 \" (\"nfs_server\")\"} else {print}}'"

#run qq against one of the clusters
alias qqf="qq --credentials-store ~/.qfsd_cred.fast-fs --host fast-fs"
alias qqd="qq --credentials-store ~/.qfsd_cred.dengue-fs --host dengue-fs"
alias qqc="qq --credentials-store ~/.qfsd_cred.chagas-fs --host chagas-fs"

#login to a cluster
alias qqlf="qql fast"
alias qqld="qql dengue"
alias qqlc="qql chagas"
alias qqaf="qqla fast"
alias qqad="qqla dengue"
alias qqac="qqla chagas"

# FUNCTIONS

#log into a Qumulo cluster
function qql () {
    local API_PASSWORD="qapi"

    local cluster="${1}-fs"
    local user="${cluster}-api"
    local qq_c="--host $cluster"
    local qq_cred="--credentials-store $HOME/.qfsd_cred.$cluster"

    qq $qq_cred $qq_c login -u $user -p $API_PASSWORD > /dev/null

    if [ $? -eq 0 ]; then
        host=`qq $qq_cred $qq_c cluster_conf | jq -r '.cluster_name'`
        login=`qq $qq_cred $qq_c who_am_i | jq -r '.name' 2> /dev/null`
        echo "${login} @ ${host}"
    else
        echo "Couldn't log into $cluster [Exit code: $?]"
    fi
}

#log into a Qumulo cluster as admin
function qqla () {

    local cluster="${1}-fs"
    local user="admin"
    local qq_c="--host $cluster"
    local qq_cred="--credentials-store $HOME/.qfsd_cred.$cluster"

    echo -n "$cluster Admin "
    qq $qq_cred $qq_c login -u $user > /dev/null

    if [ $? -eq 0 ]; then
        host=`qq $qq_cred $qq_c cluster_conf | jq -r '.cluster_name'`
        login=`qq $qq_cred $qq_c who_am_i | jq -r '.name' 2> /dev/null`
        echo "${login} @ ${host}"
    else
        echo "Couldn't log into $cluster [Exit code: $?]"
    fi
}

#get size and file count of a directory via Qumulo API
function qq_size () {
    if (( $# != 1 )); then
        echo "Usage: ${FUNCNAME[0]} <full Qumulo path>"
        return 1
    fi

    if ! echo $1 | grep -q '^/'; then
        echo "${FUNCNAME[0]}: path needs to start with a slash"
        return 2
    fi

    qqc fs_read_dir_aggregates --path $1 |
    jq -r '[(.total_data | tonumber), (.total_files | tonumber), (.total_directories | tonumber), (.path | split("/"))[-2]] | @csv' |
    tr -d '"' |
    awk -F, '{printf "%10'\''.1f Gb %12'\''d files  %s\n", $1 / 1024^3, $2 + $3, $4}'
}

#get size and file count of a directory via Qumulo API
function qq_sizes () {
    local func_name=${FUNCNAME[0]}
    local max_entries=5000

    if (( $# > 3 )); then
        echo "Usage: $func_name [ <Qumulo cluster> <full Qumulo path> ] --csv"
        return 1
    fi

    if (( $# == 1 )); then
        echo "Usage: $func_name [ <Qumulo cluster> <full Qumulo path> ]"
        echo "Error: Either specify both cluster and path, or neither to use current location"
        return 5
    fi

    if (( $# == 2 )); then
        local cluster=$1
        local path=$2
    else
        # need to use basic df here because --output clashes with some other flags
        local cluster=$(host $(df -P . | tail -1 | awk -F'[: ]' '{print $1}') | awk -F'[ .]' '{print $10}')
        local path=$(pwd -P | sed "s#$(dirname $(df -P . | tail -1 | awk '{print $NF}'))##")
    fi

    local token_file=~/.qfsd_cred.${cluster}

    if ! [ -f $token_file ]; then
        echo "$func_name: token file doesn't seem to exist: $token_file"
        return 4
    fi

    if ! $(echo $path | grep -q '^/'); then
        echo "$func_name: path needs to start with a slash"
        return 2
    fi

    local qq_output=`qq --host $cluster --credentials-store $token_file who_am_i`

    if $(echo $qq_output | grep -q Error); then
        echo "$func_name: Error talking to $cluster. Is there an established session?"
        return 3
    fi

    local qq_login=`echo $qq_output | jq -r '.name' 2> /dev/null`

    if ! [ "$qq_login" = "admin" ]; then
        echo "$func_name: Warning: Not logged in as admin (login = $qq_login). Some paths won't be accessible."
        echo
    fi

    qq --host $cluster --credentials-store $token_file fs_read_dir_aggregates --max-entries $max_entries --path $path |
    jq -r '.files[] | [(.data_usage | tonumber), (.num_files | tonumber), (.num_directories | tonumber), .name] | @csv' |
    tr -d '"' |
    awk -F, '{printf "%10'\''.1f Gb %12'\''d files  %s\n", $path / 1024^3, $2 + $3, $4}'
}

#do the same thing but make CSVs
function qq_sizes_csv () {
    local func_name=${FUNCNAME[0]}
    local max_entries=5000

    if (( $# > 2 )); then
        echo "Usage: $func_name [ <Qumulo cluster> <full Qumulo path> ]"
        return 1
    fi

    if (( $# == 1 )); then
        echo "Usage: $func_name [ <Qumulo cluster> <full Qumulo path> ]"
        echo "Error: Either specify both cluster and path, or neither to use current location"
        return 5
    fi

    if (( $# == 2 )); then
        local cluster=$1
        local path=$2
    else
        local cluster=`host \`df --output=source . | tail -1 | cut -d\: -f1\` | awk -F'[ .]' '{print $10}'`
        local path=`pwd | sed "s#\`dirname \\\`df --output=target . | tail -1\\\`\`##"`
    fi

    local token_file=~/.qfsd_cred.${cluster}

    if ! [ -f $token_file ]; then
        echo "$func_name: token file doesn't seem to exist: $token_file"
        return 4
    fi

    if ! $(echo $path | grep -q '^/'); then
        echo "$func_name: path needs to start with a slash"
        return 2
    fi

    local qq_output=`qq --host $cluster --credentials-store $token_file who_am_i`

    if $(echo $qq_output | grep -q Error); then
        echo "$func_name: Error talking to $cluster. Is there an established session?"
        return 3
    fi

    local qq_login=`echo $qq_output | jq -r '.name' 2> /dev/null`

    if ! [ "$qq_login" = "admin" ]; then
        echo "$func_name: Warning: Not logged in as admin (login = $qq_login). Some paths won't be accessible."
        echo
    fi

    qq --host $cluster --credentials-store $token_file fs_read_dir_aggregates --max-entries $max_entries --path $path |
    jq -r '.files[] | [(.data_usage | tonumber) / 1024 / 1024 / 1024, (.num_files | tonumber) + (.num_directories | tonumber), .name] | @csv' |
    tr -d '"'
}
#get size and number of directories
function qq_dirs () {
    local func_name=${FUNCNAME[0]}
    local max_entries=5000

    if (( $# > 2 )); then
        echo "Usage: $func_name [ <Qumulo cluster> <full Qumulo path> ]"
        return 1
    fi

    if (( $# == 1 )); then
        echo "Usage: $func_name [ <Qumulo cluster> <full Qumulo path> ]"
        echo "Error: Either specify both cluster and path, or neither to use current location"
        return 5
    fi

    if (( $# == 2 )); then
        local cluster=$1
        local path=$2
    else
        local cluster=`host \`df --output=source . | tail -1 | cut -d\: -f1\` | awk -F'[ .]' '{print $10}'`
        local path=`pwd | sed "s#\`dirname \\\`df --output=target . | tail -1\\\`\`##"`
    fi

    local token_file=~/.qfsd_cred.${cluster}

    if ! [ -f $token_file ]; then
        echo "$func_name: token file doesn't seem to exist: $token_file"
        return 4
    fi

    if ! $(echo $path | grep -q '^/'); then
        echo "$func_name: path needs to start with a slash"
        return 2
    fi

    local qq_output=`qq --host $cluster --credentials-store $token_file who_am_i`

    if $(echo $qq_output | grep -q Error); then
        echo "$func_name: Error talking to $cluster. Is there an established session?"
        return 3
    fi

    local qq_login=`echo $qq_output | jq -r '.name' 2> /dev/null`

    if ! [ "$qq_login" = "admin" ]; then
        echo "$func_name: Warning: Not logged in as admin (login = $qq_login). Some paths won't be accessible."
        echo
    fi

    qq --host $cluster --credentials-store $token_file fs_read_dir_aggregates --max-entries $max_entries --path $path |
    jq -r '.files[] | [(.data_usage | tonumber), (.num_directories | tonumber), .name] | @csv' |
    tr -d '"' |
    awk -F, '{printf "%10'\''.1f Gb %12'\''d dirs  %s\n", $path / 1024^3, $2, $3}'

}

#list all snapshots and their sizes
function qq_snaps () {
    local func_name=${FUNCNAME[0]}

    if (( $# != 1 )); then
        echo "Usage: $func_name <qumulo cluster name>"
        return 1
    fi

    local cluster=$1

    for snap in `(echo Total; qq --credentials-store ~/.qfsd_cred.${cluster} --host $cluster snapshot_list_snapshots | jq -r '.entries[] | .id')`; do
        if [ "$snap" == "Total" ]; then
            size=`qq --credentials-store ~/.qfsd_cred.${cluster} --host $cluster snapshot_get_total_used_capacity | jq -r '.bytes'`
        else
            size=`qq --credentials-store ~/.qfsd_cred.${cluster} --host $cluster snapshot_calculate_used_capacity --id $snap | jq -r '.bytes'`
        fi

        echo "$snap $size"
    done | awk '{printf "%5s %'\''10.1f Gb\n", $1, $2 / 1024 ^ 3}'
}

#wrapper around Qumulo agg_tree_diff
function qq_diff () {
    local func_name=${FUNCNAME[0]}

    if ! (( $# == 1 || $# == 2)); then
        echo "Usage: $func_name <path> <-v,-vv,-vvv>"
        return 1
    fi

    if (($# == 2)); then
        local verbose=$2
    fi

    #local ID=$RANDOM
    local SRC_CLUSTER="blah-fs"
    local DEST_CLUSTER="chagas-fs"

    local path=$1
    local path_label=`echo $path | sed 's#^/##' | tr '/' '.'`

    local outfile_prefix="agg_diff.$path_label.$ID"
    local dirs_output="$outfile_prefix.dirs"
    local files_output="$outfile_prefix.files"

    #~falko/scripts/agg_diff/agg_diff.py --host-src $SRC_CLUSTER --cred-store-src ~/.qfsd_cred.$SRC_CLUSTER --host-target $DEST_CLUSTER --cred-store-target ~/.qfsd_cred.$DEST_CLUSTER --path $path --dirs-out-file $dirs_output --files-out-file $files_output $verbose
    ~falko/scripts/agg_diff/agg_diff.py -r -f --host-src $SRC_CLUSTER --cred-store-src ~/.qfsd_cred.$SRC_CLUSTER --host-target $DEST_CLUSTER --cred-store-target ~/.qfsd_cred.$DEST_CLUSTER --path $path $verbose

    #more $dirs_output
}

#compare qq_sizes on two different Qumulos
#TODO replaced by qq_compare.sh?
function qq_comp () {
    local path=$1;
    local left=blah-fs;
    local right=chagas-fs;

    echo $left;
    qq_sizes $left $path;

    echo $right;
    qq_sizes $right $path;
}

